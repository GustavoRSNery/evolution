
networks:
  whatsapp-net:
    driver: bridge

# Define os volumes nomeados para persistir os dados.
# Gerir volumes desta forma é a prática recomendada pelo Docker.
volumes:
  evolution_instances:
  postgres_data:
  redis_data:

# Define os serviços (contêineres) que compõem a nossa aplicação.
services:
  # --- O NOSSO NOVO SERVIÇO DO BOT ---
  bot-whatsapp:
    build: .
    container_name: bot-whatsapp-service
    env_file:
      - ./.env
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app/src
    networks:
      - whatsapp-net
    depends_on:
      - evolution-api

  # --- SERVIÇOS EXISTENTES DA EVOLUTION API ---
  evolution-api:
    container_name: evolution_api
    image: atendai/evolution-api:v2.2.3
    environment:
      - CONFIG_SESSION_PHONE_VERSION=2.3000.1023204200 # atualizar o version da api do wpp para a versao estavel
    restart: always
    ports:
      - "8080:8080"
    env_file:
      - ./.env
    volumes:
      - evolution_instances:/evolution/instances
    networks:
      - whatsapp-net
    depends_on:
      - postgres
      - redis

  postgres:
    container_name: postgres
    image: postgres:15-alpine # Usar -alpine para uma imagem mais leve.
    command: ["postgres", "-c", "max_connections=1000"]
    restart: always
    ports:
      # Expor a porta 5432 é útil para debugging com ferramentas externas (ex: DBeaver).
      - "5432:5432"
    environment:
      # CORREÇÃO: Carregar a password do ficheiro .env em vez de a hardcodar.
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # CORREÇÃO: Adicionar o serviço à nossa rede para que a API o encontre.
    networks:
      - whatsapp-net

  redis:
    image: redis:7-alpine
    container_name: redis
    command: >
      redis-server --port 6379 --appendonly yes
    restart: always
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - whatsapp-net

